{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["// contentlayer.config.ts\nimport { defineDocumentType, makeSource } from \"contentlayer/source-files\";\nimport rehypeSlug from \"rehype-slug\";\nimport GithubSlugger from \"github-slugger\";\n\nexport const Post = defineDocumentType(() => ({\n  name: \"Post\",\n  filePathPattern: `**/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    title: { type: \"string\", required: true },\n    authors: { type: \"list\", required: true, of: { type: \"string\" } },\n    categories: { type: \"list\", required: true, of: { type: \"string\" } },\n    excerpt: { type: \"string\", required: false },\n    cover: { type: \"string\", required: true },\n    date: { type: \"date\", required: true },\n  },\n  computedFields: {\n    url: {\n      type: \"string\",\n      resolve: (post) => `/blog/${post._raw.flattenedPath}`,\n    },\n    headings: {\n      type: \"json\",\n      resolve: async (doc) => {\n        const regXHeader = /\\n(?<flag>#{1,6})\\s+(?<content>.+)/g;\n        const slugger = new GithubSlugger();\n        const headings = Array.from(doc.body.raw.matchAll(regXHeader)).map(\n          ({ groups }) => {\n            const flag = groups?.flag;\n            const content = groups?.content;\n            return {\n              level:\n                flag?.length == 1 ? \"one\" : flag?.length == 2 ? \"two\" : \"three\",\n              text: content,\n              slug: content ? slugger.slug(content) : undefined,\n            };\n          },\n        );\n        return headings;\n      },\n    },\n  },\n}));\n\nexport default makeSource({\n  contentDirPath: \"posts\",\n  documentTypes: [Post],\n  mdx: {\n    rehypePlugins: [rehypeSlug],\n  },\n});\n"],
  "mappings": ";AACA,SAAS,oBAAoB,kBAAkB;AAC/C,OAAO,gBAAgB;AACvB,OAAO,mBAAmB;AAEnB,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC5C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,SAAS,EAAE,MAAM,QAAQ,UAAU,MAAM,IAAI,EAAE,MAAM,SAAS,EAAE;AAAA,IAChE,YAAY,EAAE,MAAM,QAAQ,UAAU,MAAM,IAAI,EAAE,MAAM,SAAS,EAAE;AAAA,IACnE,SAAS,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,IAC3C,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,MAAM,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,EACvC;AAAA,EACA,gBAAgB;AAAA,IACd,KAAK;AAAA,MACH,MAAM;AAAA,MACN,SAAS,CAAC,SAAS,SAAS,KAAK,KAAK,aAAa;AAAA,IACrD;AAAA,IACA,UAAU;AAAA,MACR,MAAM;AAAA,MACN,SAAS,OAAO,QAAQ;AACtB,cAAM,aAAa;AACnB,cAAM,UAAU,IAAI,cAAc;AAClC,cAAM,WAAW,MAAM,KAAK,IAAI,KAAK,IAAI,SAAS,UAAU,CAAC,EAAE;AAAA,UAC7D,CAAC,EAAE,OAAO,MAAM;AACd,kBAAM,OAAO,QAAQ;AACrB,kBAAM,UAAU,QAAQ;AACxB,mBAAO;AAAA,cACL,OACE,MAAM,UAAU,IAAI,QAAQ,MAAM,UAAU,IAAI,QAAQ;AAAA,cAC1D,MAAM;AAAA,cACN,MAAM,UAAU,QAAQ,KAAK,OAAO,IAAI;AAAA,YAC1C;AAAA,UACF;AAAA,QACF;AACA,eAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,IAAI;AAAA,EACpB,KAAK;AAAA,IACH,eAAe,CAAC,UAAU;AAAA,EAC5B;AACF,CAAC;",
  "names": []
}
